foreach (letterPixels pxs in pxToCheck)
						{
							//Check Left
							if (CheckBlack(input_Image.GetPixel(x - 1, y)))
							{
								pxs.l.px = Color.FromArgb(255, 255, 255);
								pxs.l.origin = "r";
								pxToCheck.AddLast(pxs.l);
							}

							//Check Right
							if (CheckBlack(input_Image.GetPixel(x - 1, y)))
							{
								pxs.r.px = Color.FromArgb(255, 255, 255);
								pxs.r.origin = "l";
								pxToCheck.AddLast(pxs.r);
							}

							//Check Up
							if (CheckBlack(input_Image.GetPixel(x - 1, y)))
							{
								pxs.u.px = Color.FromArgb(255, 255, 255);
								pxs.u.origin = "d";
								pxToCheck.AddLast(pxs.d);
							}

							//Check Down
							if (CheckBlack(input_Image.GetPixel(x - 1, y)))
							{
								pxs.d.px = Color.FromArgb(255, 255, 255);
								pxs.d.origin = "u";
								pxToCheck.AddLast(pxs.u);
							}

						}

//Convert HSB to RBG.
		public static Color HSB2RGB(double h, double sl, double l)
		{
			double v;
			double r, g, b;

			r = l;   // default to gray
			g = l;
			b = l;
			v = (l <= 0.5) ? (l * (1.0 + sl)) : (l + sl - l * sl);

			if (v > 0)
			{
				double m;
				double sv;
				int sextant;
				double fract, vsf, mid1, mid2;

				m = l + l - v;
				sv = (v - m) / v;
				h *= 6.0;
				sextant = (int)h;
				fract = h - sextant;
				vsf = v * sv * fract;
				mid1 = m + vsf;
				mid2 = v - vsf;
				switch (sextant)

				{
					case 0:
						r = v;
						g = mid1;
						b = m;
						break;
					case 1:
						r = mid2;
						g = v;
						b = m;
						break;
					case 2:
						r = m;
						g = v;
						b = mid1;
						break;
					case 3:
						r = m;
						g = mid2;
						b = v;
						break;
					case 4:
						r = mid1;
						g = m;
						b = v;
						break;
					case 5:
						r = v;
						g = m;
						b = mid2;
						break;
				}
			}
			
			return Color.FromArgb(255, (int)Convert.ToByte(r * 255.0f), (int)Convert.ToByte(r * 255.0f), (int)Convert.ToByte(b * 255.0f));

		} 


string compressionString = "'T0110'h0111't0100'R0101'y11110'U11111'n11100'B11101'd1010'e1011'l000' 001'a100's110";
			string character = "";
			string tempSequence = "";
			int len = compressionString.Length;

			for (int i = 0; i < len; i++)
			{
				if (compressionString[i] == '\'')
				{
					tempSequence = "";
					character = Convert.ToString(compressionString[i + 1]);
					i += 2;

					while (i < len && compressionString[i] != '\'')
					{
						tempSequence += compressionString[i];
						i++;
					}
					i--;
					Console.WriteLine($"Char: {character}, String: {tempSequence}");
				}
			}


string dab = "thatsreallycool";
			Console.WriteLine(dab.Length);

			for (int i = 0; i < dab.Length; i++)
			{
				Console.WriteLine(dab[i]);
				Console.WriteLine(i);
			}


pxs.l.px = Color.FromArgb(0, 0, 0);
								pxs.l.origin = "r";


if (write.l.px != null)
							{
								if (write.l.px != empty)
								{
									newLetter.SetPixel(write.x - 1, write.y, black);
									write.l.px = empty;
									write.l.x = write.x - 1;
									write.l.y = write.y;
									nextPx.AddLast(write.l);
								}
							}

							//Check Right
							if (write.r.px != null)
							{
								if (write.r.px != empty)
								{
									newLetter.SetPixel(write.x + 1, write.y, black);
									write.r.px = empty;
									write.r.x = write.x + 1;
									write.r.y = write.y;
									nextPx.AddLast(write.r);
								}
							}

							//Check Up
							if (write.u.px != null)
							{
								if (write.u.px != empty)
								{
									newLetter.SetPixel(write.x, write.y + 1, black);
									write.u.px = empty;
									write.u.x = write.x;
									write.u.x = write.y + 1;
									nextPx.AddLast(write.u);
								}
							}

							//Check Down
							if (write.d.px != null)
							{
								if (write.d.px != empty)
								{
									newLetter.SetPixel(write.x, write.y - 1, black);
									write.d.px = empty;
									write.d.x = write.x;
									write.d.y = write.y - 1;
									nextPx.AddLast(write.d);
								}
							}



							//Color[] pixels = BackgroundEdit.GetAllPixels(input_image);

			for (int y = 0; y < input_image.Height; y++)
			{
				for (int x = 0; x < input_image.Width; x++, i++)
				{
					if (CheckBlack(pixels[x, y]))
					{
						//Check all 8 possible pixels arround it, then check those.
						//Build up a grid of the letter.



					}
				}
			}


			foreach (Color pixel in pixels)
			{
				//If the pixel is black
				if (CheckBlack(pixel))
				{

				}
			}

		}

		public static void CheckBlack(Color pixel)
		{
			if (pixel.GetBrightness < 0.1)
			{
				return true;
			}
			return false;
		}*/


CREATE TABLE [dbo].[User_Data] (
    [User_ID]       INT NOT NULL IDENTITY,
    [User_Name]     VARCHAR (64) NOT NULL,
    [User_Password] VARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([User_ID] ASC)
);

		/* private LinkedList<letterData> sortList(LinkedList<letterData> listToSort)
		{
			LinkedList<letterData> sortedLL = new LinkedList<letterData>();
			int length = listToSort.Count();
			letterData[] orderedLetters = new letterData[length];

			//Convert listToSort into an array that will be used for sorting.
			int counter = 0;

			foreach (letterData l in listToSort)
			{
				orderedLetters[counter] = l;
				counter++;
			}

			mergeSort(orderedLetters, 0, orderedLetters.Length - 1, orderedLetters.Length);

			foreach (letterData l in orderedLetters)
			{
				sortedLL.AddLast(l);
			}

			return sortedLL;
		}

		private void mergeSort(letterData[] arrayToSort, int left, int right, int len)
		{
			int mid;
			if (right > left)
			{
				mid = (right + left) / 2;
				mergeSort(arrayToSort, left, mid, len);
				mergeSort(arrayToSort, (mid + 1), right, len);
				mergeMethod(arrayToSort, left, mid++, right, len);
			}
		}

		private void mergeMethod(letterData[] lData, int left, int mid, int right, int len)
		{
			letterData[] temp = new letterData[len];
			int leftEnd, numberOfElements, tempPos;
			leftEnd = mid - 1;
			tempPos = left;
			numberOfElements = (right - Left + 1);

			while ((left <= leftEnd) && (mid <= right))
			{
				if (lData[left].Frequency <= lData[mid].Frequency)
				{
					temp[tempPos++] = lData[mid++];
				}
				else
				{
					temp[tempPos++] = lData[mid++];
				}
			}

			while (left <= leftEnd)
			{
				temp[tempPos++] = lData[left++];
			}

			while (mid <= right)
			{
				temp[tempPos++] = lData[right];
			}

			for (int i = 0; i < numberOfElements; i++)
			{
				lData[right] = temp[right];
				right--;
			}
		} */


LinkedList<string> words = new LinkedList<string>();
			words.AddLast("tteesst");

			int i = 0;

			while (words.Last != null)
			{
				i++;

				if (i < 7)
				{
					words.AddLast("chees: " + i);
				}
				else
				{
					Console.WriteLine(words.First.Value);
					words.RemoveFirst();

				}

			}

			int num = 245;

			string bin = "";

			while (num > 0)
			{
				bin = Convert.ToString(num % 2) + bin;
				num /= 2;
			}

			while (bin.Length < 14)
			{
				bin = "0" + bin;
			}

			Console.WriteLine("\n" + bin);